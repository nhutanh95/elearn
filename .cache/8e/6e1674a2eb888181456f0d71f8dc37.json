{"id":"profile.html","dependencies":[{"name":"./../../components/TeacherProfile/TeacherForm.js","dynamic":true,"resolved":"/Users/datcodero/Work Mona Media/host/elearningreact/components/TeacherProfile/TeacherForm.js","parent":"/Users/datcodero/Work Mona Media/host/elearningreact/src/teacher/profile.html"},{"name":"/Users/datcodero/Work Mona Media/host/elearningreact/.babelrc","includedInParent":true,"mtime":1593141979844},{"name":"/Users/datcodero/Work Mona Media/host/elearningreact/package.json","includedInParent":true,"mtime":1593142500405}],"generated":{"html":"@@include('./../head.html')\n\n<body>\n    @@include('./../header.html')\n    <div class=\"content content-fixed\">\n        <div class=\"container pd-x-0 pd-lg-x-10 pd-xl-x-0 \">\n            <div id=\"react-teacher-form\"></div>\n            <script src=\"/3fdc0a480e8fd292c36cc3fccedbc6e7.js\"></script>\n        </div>\n    </div>\n    @@include('./../footer.html')\n    <script>function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\n$(document).ready(function () {\n  var form = document.getElementById('form-teacher-profile');\n  $(\".js-select2\").select2({\n    closeOnSelect: false,\n    placeholder: \"What kind of teaching experience do you have?\",\n    allowHtml: false,\n    allowClear: true // tags: true // создает новые опции на лету\n\n  });\n\n  var closestParent = function closestParent(child, className) {\n    if (!child || child == document) {\n      return null;\n    }\n\n    if (child.classList.contains(className)) {\n      return child;\n    } else {\n      return closestParent(child.parentNode, className);\n    }\n  };\n\n  var resetFormGroup = function resetFormGroup(formGroup) {\n    // Remove the success and error classes\n    formGroup.classList.remove(\"has-error\");\n    formGroup.classList.remove(\"has-success\"); // and remove any old messages\n\n    _.each(formGroup.querySelectorAll(\".help-block.error\"), function (el) {\n      el.parentNode.removeChild(el);\n    });\n  };\n\n  var showErrorsForInput = function showErrorsForInput(input, errors) {\n    // This is the root of the input\n    var formGroup = closestParent(input.parentNode, \"form-group\") // Find where the error messages will be insert into\n    ,\n        messages = formGroup.querySelector(\".messages\"); // First we remove any old messages and resets the classes\n\n    resetFormGroup(formGroup); // If we have errors\n\n    if (errors) {\n      // we first mark the group has having errors\n      formGroup.classList.add(\"has-error\"); // then we append all the errors\n\n      _.each(errors, function (error) {\n        addError(messages, error);\n      });\n    } else {\n      // otherwise we simply mark it as success\n      formGroup.classList.add(\"has-success\");\n    }\n  };\n\n  var showErrors = function showErrors(form, errors) {\n    _.each(form.querySelectorAll(\"input[name], select[name]\"), function (input) {\n      // Since the errors can be null if no errors were found we need to handle\n      // that\n      showErrorsForInput(input, errors && errors[input.name]);\n    });\n  };\n\n  var elementForms = document.querySelectorAll(\"input, textarea, select\");\n\n  _toConsumableArray(elementForms).map(function (ele) {\n    ele.addEventListener('change', function () {\n      var errors = validate(form, validateRules);\n      showErrors(form, errors || {});\n    });\n  });\n});</script>\n</body>\n\n"},"sourceMaps":null,"error":null,"hash":"96240fd0bab75376aa8d78761624993b","cacheData":{"env":{}}}